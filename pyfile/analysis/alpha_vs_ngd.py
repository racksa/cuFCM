import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib as mpl
import numpy as np

boxsize=150
phi_array = np.array([0.0005*4**j for j in range(5)])
N_array = phi_array*(boxsize/0.5)**3/(4./3.*np.pi)
print(phi_array, N_array)

alpha_array = np.array(
[[0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4],
 [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
 [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6],
 [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7],
 [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8],
 [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9],
 [1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. , 1. ],
 [1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1],
 [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2],
 [1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3],
 [1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4],
 [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5],
 [1.6, 1.6, 1.6, 1.6, 1.6, 1.6, 1.6, 1.6, 1.6, 1.6],
 [1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7],
 [1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8],
 [1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9],
 [2. , 2. , 2. , 2. , 2. , 2. , 2. , 2. , 2. , 2. ]]
)

ngd_array = np.array(
[[ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.],
 [ 5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.]]
)

error_array = np.array(
[[1.09280907e+00, 1.09280907e+00, 6.85298181e-01, 6.85298181e-01,
  6.85148188e-01, 6.85148188e-01, 6.85148188e-01, 6.84925961e-01,
  6.84925961e-01, 6.84925961e-01],
 [1.83741566e-01, 1.83741566e-01, 1.73347985e-01, 1.73347985e-01,
  1.63453704e-01, 1.63453704e-01, 1.63450685e-01, 1.63450685e-01,
  1.63448082e-01, 1.63448082e-01],
 [1.21076003e-01, 8.84685403e-02, 8.84685403e-02, 4.44195028e-02,
  4.44195028e-02, 4.43746728e-02, 4.43508651e-02, 4.43508651e-02,
  4.43508585e-02, 4.43508585e-02],
 [1.26223015e-01, 1.26223015e-01, 1.32517851e-02, 1.19591511e-02,
  1.19591511e-02, 1.12719605e-02, 1.12719826e-02, 1.12719826e-02,
  1.12722696e-02, 1.12722697e-02],
 [1.75034054e-01, 2.79560959e-02, 1.55721435e-02, 1.55721435e-02,
  2.52386140e-03, 2.49896216e-03, 2.48865117e-03, 2.48865318e-03,
  2.48865318e-03, 2.48865901e-03],
 [7.03085815e-02, 7.03085815e-02, 3.87546384e-02, 2.91206046e-03,
  1.62058904e-03, 4.66197450e-04, 4.65490416e-04, 4.65173375e-04,
  4.65173206e-04, 4.65173121e-04],
 [1.29333092e-01, 7.35763453e-02, 1.11409069e-02, 5.93363878e-03,
  2.95385226e-04, 1.71425990e-04, 7.29234019e-05, 7.28832533e-05,
  7.28621772e-05, 7.28621444e-05],
 [1.15887756e-01, 2.95017688e-02, 1.58339949e-02, 1.52916629e-03,
  8.11034771e-04, 3.31000282e-05, 1.97019992e-05, 9.51883797e-06,
  9.51468865e-06, 9.51234354e-06],
 [1.59687639e-01, 6.02461341e-02, 3.31248577e-02, 2.85044264e-03,
  2.15296932e-04, 1.14192881e-04, 4.22636937e-06, 2.45221608e-06,
  1.03232928e-06, 1.03193208e-06],
 [1.02251893e-01, 5.83998068e-02, 1.39822381e-02, 7.53523791e-03,
  5.00134396e-04, 3.32311861e-05, 1.76365913e-05, 3.49706144e-07,
  9.32017877e-08, 9.29986335e-08],
 [1.51245449e-01, 9.07516455e-02, 1.62295232e-02, 3.00140127e-03,
  1.72994669e-04, 9.16887308e-05, 5.76205013e-06, 1.12540511e-07,
  6.06071753e-08, 6.98043832e-09],
 [1.27931350e-01, 5.26403935e-02, 7.53049264e-03, 4.10608693e-03,
  3.45252913e-04, 3.41941659e-05, 1.12856587e-06, 5.99444831e-07,
  1.25369364e-08, 5.36560704e-10],
 [1.66758311e-01, 4.94296840e-02, 1.57879664e-02, 1.88057119e-03,
  1.01929699e-03, 7.75476063e-05, 3.92015676e-06, 2.49011008e-07,
  5.59645762e-09, 2.98911772e-09],
 [1.20252187e-01, 7.42583627e-02, 1.66003332e-02, 2.49518023e-03,
  4.77448519e-04, 3.47333795e-05, 1.75076053e-06, 9.30017118e-07,
  3.26770326e-08, 8.05297296e-10],
 [1.60446273e-01, 4.71924004e-02, 9.28999541e-03, 5.27306451e-03,
  7.05724772e-04, 6.80598755e-05, 4.75702551e-06, 2.41806710e-07,
  1.68478027e-08, 4.53595620e-10],
 [1.35990836e-01, 7.08516494e-02, 1.69766825e-02, 2.93379347e-03,
  3.72308579e-04, 3.50159469e-05, 2.45538181e-06, 1.28886694e-07,
  5.07784093e-09, 1.49930315e-10],
 [1.69536128e-01, 6.32920301e-02, 1.69380519e-02, 3.40487326e-03,
  5.21732772e-04, 6.13652828e-05, 5.56351406e-06, 3.89831455e-07,
  2.11453223e-08, 8.88374032e-10]]
)

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
levels = np.logspace(-10, -1, 10)
print(levels)
cs = ax.contourf(ngd_array, alpha_array, error_array,
                levels, cmap=plt.cm.bone, norm=mpl.colors.LogNorm())
cs2 = ax.contour(cs,
                levels, norm=mpl.colors.LogNorm())        
ax.clabel(cs2, inline=True, fontsize=10, fmt='%2.1E', colors=[plt.cm.bone((30*i + 150)%290) for i in range(9)])
cbar = fig.colorbar(cs)
cbar.ax.set_ylabel('Linear velocity % error')
cbar.ax.set_yscale('log')
# cbar.add_lines(cs)
# adding title and labels
ax.set_xlabel(r"$N_{ngd}$")
ax.set_ylabel(r"$\Sigma/\Delta x$")
# ax.set_xlim((1.66, 15))
# ax.set_ylim((1, 10))
# ax.set_title(r"$\Sigma/\Delta x$ vs. $ngd$")
plt.savefig('img/alpha_vs_ngd.eps', bbox_inches = 'tight', format='eps')
plt.show()

fig2 = plt.figure()
ax2 = fig2.add_subplot(1,1,1)
for i, ngd in enumerate(ngd_array[0]):
  ax2.plot(alpha_array[:, i], error_array[:, i], label=f'ngd={ngd}')
# adding title and labels
ax2.set_ylabel(r"$Error$")
ax2.set_xlabel(r"$\Sigma/\Delta x$")
ax2.set_yscale('log')
# ax.set_xlim((1.66, 12))
# ax.set_ylim((1, 10))
# ax2.set_title(r"Linear velocity % error vs. $\Sigma/\Delta x$")
plt.legend()
plt.savefig('img/error_vs_alpha.eps', bbox_inches = 'tight', format='eps')
plt.show()